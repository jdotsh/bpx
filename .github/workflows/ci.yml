name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Run tests
        run: npm test --if-present

      - name: Build application
        run: npm run build
        env:
          # Mock environment variables for build
          DATABASE_URL: 'postgresql://user:pass@localhost:5432/test'
          DIRECT_URL: 'postgresql://user:pass@localhost:5432/test'
          NEXT_PUBLIC_SUPABASE_URL: 'https://test.supabase.co'
          NEXT_PUBLIC_SUPABASE_ANON_KEY: 'test-key'
          REDIS_URL: 'redis://localhost:6379'
          REDIS_TOKEN: 'test-token'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Run dependency check
        run: npx audit-ci --config ./audit-ci.json || true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: bpmn-studio:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container -p 3000:3000 \
            -e DATABASE_URL='postgresql://user:pass@localhost:5432/test' \
            -e DIRECT_URL='postgresql://user:pass@localhost:5432/test' \
            -e NEXT_PUBLIC_SUPABASE_URL='https://test.supabase.co' \
            -e NEXT_PUBLIC_SUPABASE_ANON_KEY='test-key' \
            -e REDIS_URL='redis://localhost:6379' \
            -e REDIS_TOKEN='test-token' \
            bpmn-studio:latest
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3000/api/health || exit 1
          
          # Stop container
          docker stop test-container

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: echo "Deploy step would go here"
        # Add your deployment steps here
        # Example for Vercel:
        # - name: Deploy to Vercel
        #   uses: amondnet/vercel-action@v25
        #   with:
        #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
        #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        #     vercel-args: '--prod'
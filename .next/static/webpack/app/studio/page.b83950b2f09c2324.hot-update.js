"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/studio/page",{

/***/ "(app-pages-browser)/./components/bpmn/BpmnStudioFixed.tsx":
/*!*********************************************!*\
  !*** ./components/bpmn/BpmnStudioFixed.tsx ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BpmnStudioFixed: function() { return /* binding */ BpmnStudioFixed; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bpmn_js_lib_Modeler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! bpmn-js/lib/Modeler */ \"(app-pages-browser)/./node_modules/bpmn-js/lib/Modeler.js\");\n/* harmony import */ var _bpmn_toolbar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bpmn-toolbar */ \"(app-pages-browser)/./components/bpmn/bpmn-toolbar.tsx\");\n/* harmony import */ var _bpmn_elements_palette__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bpmn-elements-palette */ \"(app-pages-browser)/./components/bpmn/bpmn-elements-palette.tsx\");\n/* harmony import */ var _XmlViewerModal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./XmlViewerModal */ \"(app-pages-browser)/./components/bpmn/XmlViewerModal.tsx\");\n/* harmony import */ var _components_theme_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/theme-provider */ \"(app-pages-browser)/./components/theme-provider.tsx\");\n/* __next_internal_client_entry_do_not_use__ BpmnStudioFixed auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n// NO CSS imports here - they are in globals.css\nconst DEFAULT_BPMN = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \\n  xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" \\n  xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \\n  xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" \\n  xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" \\n  id=\"sample-diagram\" \\n  targetNamespace=\"http://bpmn.io/schema/bpmn\">\\n  <bpmn2:process id=\"Process_1\" isExecutable=\"false\">\\n    <bpmn2:startEvent id=\"StartEvent_1\" name=\"Start\"/>\\n  </bpmn2:process>\\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_1\">\\n      <bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">\\n        <dc:Bounds height=\"36.0\" width=\"36.0\" x=\"412.0\" y=\"240.0\"/>\\n      </bpmndi:BPMNShape>\\n    </bpmndi:BPMNPlane>\\n  </bpmndi:BPMNDiagram>\\n</bpmn2:definitions>';\nfunction BpmnStudioFixed() {\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const modelerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const fileInputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isReady, setIsReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [canUndo, setCanUndo] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [canRedo, setCanRedo] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { theme, setTheme } = (0,_components_theme_provider__WEBPACK_IMPORTED_MODULE_5__.useTheme)();\n    const styleElementRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [zoomLevel, setZoomLevel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(100);\n    const [saving, setSaving] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [activeTool, setActiveTool] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);\n    const [isMeetingMode, setIsMeetingMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isMinimapOpen, setIsMinimapOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showGrid, setShowGrid] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [showPreview, setShowPreview] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showXmlViewer, setShowXmlViewer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentXml, setCurrentXml] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [selectedElements, setSelectedElements] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Helper function to apply styles (needs to be defined before useEffect)\n    const applyBpmnStyles = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((modeler, currentTheme)=>{\n        if (!modeler) return;\n        try {\n            const canvas = modeler.get(\"canvas\");\n            if (!canvas) return;\n            // Get the container and ensure SVG is available\n            const container = canvas._container || canvas.getContainer();\n            const svg = (container === null || container === void 0 ? void 0 : container.querySelector(\"svg\")) || canvas._svg;\n            // Check if SVG element exists and has necessary methods\n            if (!svg || typeof svg.createSVGMatrix !== \"function\") {\n                console.warn(\"SVG element not ready, delaying style application\");\n                setTimeout(()=>applyBpmnStyles(modeler, currentTheme), 100);\n                return;\n            }\n            // Reuse existing style element or create new one\n            let style = styleElementRef.current;\n            if (!style) {\n                style = document.createElement(\"style\");\n                style.id = \"bpmn-custom-styles\";\n                styleElementRef.current = style;\n            }\n            // Define styles based on current theme\n            const isDark = currentTheme === \"dark\";\n            console.log(\"Applying BPMN styles for theme:\", currentTheme, \"isDark:\", isDark);\n            style.textContent = '\\n      /* Ensure proper pointer events for drag and drop */\\n      .djs-container {\\n        pointer-events: auto !important;\\n      }\\n      \\n      .djs-element > * {\\n        pointer-events: all !important;\\n      }\\n      \\n      .djs-hit {\\n        pointer-events: all !important;\\n        fill: transparent !important;\\n        stroke: transparent !important;\\n      }\\n      \\n      .djs-shape .djs-hit {\\n        fill: transparent !important;\\n        pointer-events: all !important;\\n      }\\n      \\n      .djs-drag-active {\\n        pointer-events: all !important;\\n      }\\n      \\n      /* === ACTIVITIES (Tasks, Sub-processes) === */\\n      \\n      /* Task rectangles - MAXIMUM SPECIFICITY */\\n      .djs-shape .djs-visual > rect,\\n      .djs-element[data-element-id*=\"Task\"] rect,\\n      .djs-element[data-element-id*=\"Activity\"] rect,\\n      rect.djs-hit,\\n      rect.djs-outline {\\n        stroke: '.concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        stroke-dasharray: none !important;\\n        stroke-width: 2px !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", \" !important;\\n      }\\n      \\n      /* All rect elements in shapes (fallback) */\\n      .djs-shape rect {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", \" !important;\\n      }\\n      \\n      /* NUCLEAR OPTION: Override ANY rect with black stroke in dark mode */\\n      \").concat(isDark ? '\\n        rect[stroke=\"#000000\"],\\n        rect[stroke=\"black\"],\\n        rect[stroke=\"rgb(0, 0, 0)\"],\\n        rect[style*=\"stroke: rgb(0, 0, 0)\"],\\n        rect[style*=\"stroke:#000000\"],\\n        rect[style*=\"stroke: #000000\"],\\n        rect[style*=\"stroke:black\"] {\\n          stroke: #ffffff !important;\\n          stroke-opacity: 1 !important;\\n        }\\n        \\n        /* SUPER NUCLEAR: Target Tasks by ANY means necessary */\\n        g[data-element-id*=\"Task\"] rect,\\n        g[data-element-id*=\"Activity\"] rect,\\n        .djs-group[data-element-id*=\"Task\"] rect,\\n        g.djs-element rect,\\n        g.djs-shape rect,\\n        svg rect:not([fill=\"none\"]):not([fill=\"transparent\"]) {\\n          stroke: #ffffff !important;\\n          stroke-opacity: 1 !important;\\n          stroke-width: 2px !important;\\n        }\\n        \\n        /* Target the visual rect specifically */\\n        g[data-element-id*=\"Task\"] > .djs-visual > rect,\\n        g[data-element-id*=\"Activity\"] > .djs-visual > rect {\\n          stroke: #ffffff !important;\\n          fill: #1f2937 !important;\\n          stroke-opacity: 1 !important;\\n        }\\n      ' : \"\", '\\n      \\n      /* Task type icons (user, service, script, etc) */\\n      .djs-element[data-element-id*=\"Task\"] .djs-visual > path,\\n      .djs-element[data-element-id*=\"Task\"] .djs-visual > g > path {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n      }\\n      \\n      /* Sub-process markers (+) */\\n      .djs-element[data-element-id*=\"SubProcess\"] .djs-visual > path {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: none !important;\\n      }\\n      \\n      /* === EVENTS === */\\n      \\n      /* Event circles (outer) */\\n      .djs-shape .djs-visual > circle {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        stroke-width: 2px !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", \" !important;\\n      }\\n      \\n      /* All circle elements in shapes (fallback) */\\n      .djs-shape circle {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", \" !important;\\n      }\\n      \\n      /* Event inner circles (for intermediate/boundary) */\\n      .djs-shape .djs-visual > g > circle {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", ' !important;\\n      }\\n      \\n      /* Event type icons (message, timer, error, signal, etc) */\\n      .djs-element[data-element-id*=\"Event\"] .djs-visual > g > path,\\n      .djs-element[data-element-id*=\"Event\"] .djs-visual > path {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n        stroke-width: 1px !important;\\n      }\\n      \\n      /* Boundary events (attached to activities) */\\n      .djs-element[data-element-id*=\"BoundaryEvent\"] .djs-visual > circle {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", \" !important;\\n      }\\n      \\n      /* === GATEWAYS === */\\n      \\n      /* Gateway diamonds */\\n      .djs-shape .djs-visual > polygon {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        stroke-width: 2px !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", \" !important;\\n      }\\n      \\n      /* All polygon elements in shapes (fallback) */\\n      .djs-shape polygon {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", ' !important;\\n      }\\n      \\n      /* Gateway symbols (X, +, O, etc) */\\n      .djs-element[data-element-id*=\"Gateway\"] .djs-visual > g > path,\\n      .djs-element[data-element-id*=\"Gateway\"] .djs-visual > path {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n        fill: none !important;\\n        stroke-width: 2px !important;\\n      }\\n      \\n      /* Complex gateway star */\\n      .djs-element[data-element-id*=\"ComplexGateway\"] .djs-visual > path {\\n        fill: ').concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n      }\\n      \\n      /* === DATA OBJECTS === */\\n      \\n      /* Data object shapes */\\n      .djs-element[data-element-id*=\"DataObject\"] .djs-visual > path,\\n      .djs-element[data-element-id*=\"DataStore\"] .djs-visual > path {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", ' !important;\\n      }\\n      \\n      /* Data collection markers */\\n      .djs-element[data-element-id*=\"DataObject\"] .djs-visual > g > path {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n        fill: none !important;\\n      }\\n      \\n      /* === PARTICIPANTS (Pools/Lanes) === */\\n      \\n      /* Pool/Lane containers */\\n      .djs-element[data-element-id*=\"Participant\"] .djs-visual > rect,\\n      .djs-element[data-element-id*=\"Lane\"] .djs-visual > rect {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", ' !important;\\n      }\\n      \\n      /* Pool/Lane headers */\\n      .djs-element[data-element-id*=\"Participant\"] .djs-visual > g > rect:first-child,\\n      .djs-element[data-element-id*=\"Lane\"] .djs-visual > g > rect:first-child {\\n        fill: ').concat(isDark ? \"#374151\" : \"#e5e7eb\", \" !important;\\n      }\\n      \\n      /* === CONNECTIONS === */\\n      \\n      /* Sequence flows and message flows */\\n      .djs-connection .djs-visual > path {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: none !important;\\n      }\\n      \\n      /* Arrow heads */\\n      .djs-connection .djs-visual > polyline,\\n      .djs-connection .djs-visual > polygon {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n      }\\n      \\n      /* Association/Data association (dotted lines) */\\n      .djs-connection[data-element-id*=\"Association\"] .djs-visual > path {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n        stroke-dasharray: 5, 5 !important;\\n      }\\n      \\n      /* Message flows (dashed lines) */\\n      .djs-connection[data-element-id*=\"MessageFlow\"] .djs-visual > path {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n        stroke-dasharray: 10, 5 !important;\\n      }\\n      \\n      /* === ARTIFACTS === */\\n      \\n      /* Text annotations */\\n      .djs-element[data-element-id*=\"TextAnnotation\"] .djs-visual > rect {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n        fill: none !important;\\n        stroke-dasharray: 5, 5 !important;\\n      }\\n      \\n      /* Groups */\\n      .djs-element[data-element-id*=\"Group\"] .djs-visual > rect {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: none !important;\\n        stroke-dasharray: 8, 3, 1, 3 !important;\\n        stroke-width: 1px !important;\\n      }\\n      \\n      /* === TEXT LABELS === */\\n      \\n      /* All text elements */\\n      .djs-label,\\n      .djs-shape .djs-visual text,\\n      .djs-element text,\\n      text {\\n        fill: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n      }\\n      \\n      /* Label backgrounds should be transparent */\\n      .djs-label .djs-visual rect {\\n        fill: transparent !important;\\n        stroke: none !important;\\n      }\\n      \\n      /* === GENERIC FALLBACKS === */\\n      \\n      /* Any other path elements */\\n      .djs-shape .djs-visual > path {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n      }\\n      \\n      /* All paths with stroke attribute */\\n      path[stroke]:not([stroke=\"none\"]) {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n      }\\n      \\n      /* All ellipse elements */\\n      ellipse {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        fill: \").concat(isDark ? \"#1f2937\" : \"#ffffff\", \" !important;\\n      }\\n      \\n      /* All line elements */\\n      line {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n      }\\n      \\n      /* Filled path elements (icons, markers) */\\n      .djs-shape .djs-visual > g > path[fill]:not([fill=\"none\"]) {\\n        fill: ').concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n      }\\n      \\n      /* Catch all SVG shapes that might have black stroke in light mode */\\n      .djs-visual > *[stroke=\"#000000\"],\\n      .djs-visual > *[stroke=\"black\"],\\n      .djs-visual > *[stroke=\"rgb(0,0,0)\"],\\n      .djs-visual > *[stroke=\"rgb(0, 0, 0)\"] {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n      }\\n      \\n      /* Catch all nested elements with black stroke */\\n      .djs-visual *[stroke=\"#000000\"],\\n      .djs-visual *[stroke=\"black\"],\\n      .djs-visual *[stroke=\"rgb(0,0,0)\"],\\n      .djs-visual *[stroke=\"rgb(0, 0, 0)\"] {\\n        stroke: ').concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n      }\\n      \\n      /* Catch all SVG shapes that might have white fill in light mode */\\n      .djs-visual > *[fill=\"#ffffff\"],\\n      .djs-visual > *[fill=\"white\"],\\n      .djs-visual > *[fill=\"rgb(255,255,255)\"],\\n      .djs-visual > *[fill=\"rgb(255, 255, 255)\"] {\\n        fill: ').concat(isDark ? \"#1f2937\" : \"#ffffff\", ' !important;\\n      }\\n      \\n      /* Catch all nested elements with white fill */\\n      .djs-visual *[fill=\"#ffffff\"],\\n      .djs-visual *[fill=\"white\"],\\n      .djs-visual *[fill=\"rgb(255,255,255)\"],\\n      .djs-visual *[fill=\"rgb(255, 255, 255)\"] {\\n        fill: ').concat(isDark ? \"#1f2937\" : \"#ffffff\", \" !important;\\n      }\\n      \\n      /* Direct editing text */\\n      .djs-direct-editing-parent {\\n        color: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        background: transparent !important;\\n      }\\n      \\n      .djs-direct-editing-content {\\n        color: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        background: transparent !important;\\n        caret-color: \").concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n      }\\n      \\n      /* Ensure the editing box itself is transparent */\\n      .djs-direct-editing-parent > div {\\n        background: transparent !important;\\n      }\\n      \\n      /* Contenteditable elements should be transparent */\\n      [contenteditable=\"true\"] {\\n        background: transparent !important;\\n        outline: none !important;\\n      }\\n      \\n      /* Focus state for editing */\\n      .djs-direct-editing-content:focus {\\n        background: transparent !important;\\n        outline: 1px dotted ').concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n      }\\n      \\n      /* === SELECTION VISIBILITY FIX === */\\n      \\n      /* Selected element outline - make it highly visible */\\n      .djs-outline {\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        stroke-width: 3px !important;\\n        stroke-dasharray: 5, 5 !important;\\n        fill: none !important;\\n        fill-opacity: 0 !important;\\n        opacity: 1 !important;\\n      }\\n      \\n      /* Outline paths and polygons must be transparent */\\n      .djs-outline path,\\n      .djs-outline polygon,\\n      .djs-outline polyline,\\n      .djs-outline rect,\\n      .djs-outline circle,\\n      .djs-outline ellipse {\\n        fill: none !important;\\n        fill-opacity: 0 !important;\\n      }\\n      \\n      /* Selection box overlay - MUST BE TRANSPARENT */\\n      .djs-lasso-overlay {\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        stroke-width: 2px !important;\\n        fill: \").concat(isDark ? \"rgba(96, 165, 250, 0.1)\" : \"rgba(37, 99, 235, 0.1)\", \" !important;\\n        opacity: 1 !important;\\n      }\\n      \\n      /* Multi-select marquee - transparent background */\\n      .djs-marquee {\\n        fill: \").concat(isDark ? \"rgba(96, 165, 250, 0.1)\" : \"rgba(37, 99, 235, 0.1)\", \" !important;\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        stroke-width: 1px !important;\\n        stroke-dasharray: 5, 5 !important;\\n      }\\n      \\n      /* Selected elements get a highlight */\\n      .djs-element.selected .djs-outline {\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        stroke-width: 3px !important;\\n        opacity: 1 !important;\\n      }\\n      \\n      /* Hover state for better visibility */\\n      .djs-element.hover .djs-outline {\\n        stroke: \").concat(isDark ? \"#93c5fd\" : \"#60a5fa\", \" !important;\\n        stroke-width: 2px !important;\\n        opacity: 0.8 !important;\\n      }\\n      \\n      /* Selection frame around elements */\\n      .djs-select-visual {\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        stroke-width: 2px !important;\\n        stroke-dasharray: 5, 5 !important;\\n        fill: none !important;\\n      }\\n      \\n      /* Multi-selection visual */\\n      .djs-multiselect-visual {\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        stroke-width: 2px !important;\\n        fill: \").concat(isDark ? \"rgba(96, 165, 250, 0.05)\" : \"rgba(37, 99, 235, 0.05)\", \" !important;\\n      }\\n      \\n      /* Resize handles - small corner squares */\\n      .djs-resizer-visual,\\n      .djs-resizer-hit {\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        fill: transparent !important;\\n        opacity: 1 !important;\\n      }\\n      \\n      /* Resize handle corners - the actual squares */\\n      .djs-resizer-visual rect,\\n      .djs-resizer-hit rect {\\n        fill: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n        stroke-width: 1px !important;\\n        width: 6px !important;\\n        height: 6px !important;\\n      }\\n      \\n      /* Selection frame - MUST BE TRANSPARENT */\\n      .djs-selection-frame {\\n        fill: transparent !important;\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        stroke-width: 2px !important;\\n        stroke-dasharray: 5, 5 !important;\\n      }\\n      \\n      /* Selection visual box - TRANSPARENT BACKGROUND */\\n      .djs-selection-visual {\\n        fill: transparent !important;\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n      }\\n      \\n      /* Selection overlay background - CRITICAL FIX */\\n      .djs-overlay-container .djs-overlay {\\n        background: transparent !important;\\n      }\\n      \\n      /* Any selection-related overlays must be transparent */\\n      .djs-overlay-container > * {\\n        background: transparent !important;\\n      }\\n      \\n      /* Lasso selection area */\\n      .djs-lasso-overlay rect {\\n        fill: \").concat(isDark ? \"rgba(96, 165, 250, 0.1)\" : \"rgba(37, 99, 235, 0.1)\", \" !important;\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n      }\\n      \\n      /* Drag selection marquee box */\\n      .djs-drag-marquee {\\n        fill: \").concat(isDark ? \"rgba(96, 165, 250, 0.1)\" : \"rgba(37, 99, 235, 0.1)\", \" !important;\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        stroke-width: 1px !important;\\n        stroke-dasharray: 5, 5 !important;\\n      }\\n      \\n      /* Group selection frame */\\n      .djs-group-selector {\\n        fill: transparent !important;\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", \" !important;\\n        stroke-width: 2px !important;\\n        stroke-dasharray: 5, 5 !important;\\n      }\\n      \\n      /* Selected state visual feedback */\\n      .selected > .djs-visual {\\n        filter: \").concat(isDark ? \"drop-shadow(0 0 4px rgba(96, 165, 250, 0.5))\" : \"drop-shadow(0 0 4px rgba(37, 99, 235, 0.3))\", \" !important;\\n      }\\n      \\n      /* Make sure selection doesn't hide elements */\\n      .djs-overlay {\\n        pointer-events: none !important;\\n      }\\n      \\n      .djs-overlay.djs-lasso-overlay {\\n        pointer-events: all !important;\\n      }\\n      \\n      /* AGGRESSIVE FIX: Force ALL selection rectangles to be transparent */\\n      .selected rect:not(.djs-visual rect) {\\n        fill: transparent !important;\\n      }\\n      \\n      /* Selection indicators should only be outlines */\\n      .djs-outline rect,\\n      .djs-selection rect,\\n      .djs-select rect {\\n        fill: transparent !important;\\n        stroke: \").concat(isDark ? \"#60a5fa\" : \"#2563eb\", ' !important;\\n        stroke-width: 2px !important;\\n      }\\n      \\n      /* Ensure no background on selection visuals */\\n      [class*=\"select\"] rect:not(.djs-visual rect) {\\n        fill: transparent !important;\\n      }\\n      \\n      /* Remove any fill from selection frames */\\n      .djs-frame rect {\\n        fill: transparent !important;\\n      }\\n      \\n      /* Canvas background - target multiple selectors for better coverage */\\n      .djs-container,\\n      .djs-container svg,\\n      .djs-viewport,\\n      .djs-plane {\\n        background-color: ').concat(isDark ? \"#111827\" : \"#f9fafb\", \" !important;\\n      }\\n      \\n      /* Grid pattern background */\\n      .grid-background {\\n        background-image: \\n          linear-gradient(\").concat(isDark ? \"rgba(255,255,255,0.03)\" : \"rgba(0,0,0,0.03)\", \" 1px, transparent 1px),\\n          linear-gradient(90deg, \").concat(isDark ? \"rgba(255,255,255,0.03)\" : \"rgba(0,0,0,0.03)\", \" 1px, transparent 1px);\\n        background-size: 20px 20px;\\n        background-position: 0 0, 0 0;\\n      }\\n      \\n      /* Apply grid to canvas when enabled */\\n      .djs-container.show-grid > svg {\\n        background-image: \\n          linear-gradient(\").concat(isDark ? \"rgba(255,255,255,0.05)\" : \"rgba(0,0,0,0.05)\", \" 1px, transparent 1px),\\n          linear-gradient(90deg, \").concat(isDark ? \"rgba(255,255,255,0.05)\" : \"rgba(0,0,0,0.05)\", \" 1px, transparent 1px);\\n        background-size: 20px 20px;\\n        background-position: 0 0, 0 0;\\n        background-color: \").concat(isDark ? \"#111827\" : \"#f9fafb\", \" !important;\\n      }\\n      \\n      /* Ensure the SVG itself has the right background */\\n      .djs-container > svg {\\n        background-color: \").concat(isDark ? \"#111827\" : \"#f9fafb\", \" !important;\\n      }\\n      \\n      /* Hide native BPMN.js palette since we use custom */\\n      .djs-palette {\\n        display: none !important;\\n      }\\n      \\n      /* === ULTIMATE FALLBACK - Catch ANY element that might be missed === */\\n      \\n      /* AGGRESSIVE: Force all strokes in djs elements */\\n      .djs-container svg * {\\n        stroke: \").concat(isDark ? \"#ffffff\" : \"#000000\", ' !important;\\n      }\\n      \\n      /* But preserve transparent strokes */\\n      .djs-container svg *[stroke=\"none\"],\\n      .djs-container svg *[stroke=\"transparent\"],\\n      .djs-container svg *[stroke-opacity=\"0\"] {\\n        stroke: transparent !important;\\n      }\\n      \\n      /* Force proper fills on basic shapes */\\n      .djs-container svg rect:not([fill=\"none\"]):not([fill=\"transparent\"]),\\n      .djs-container svg circle:not([fill=\"none\"]):not([fill=\"transparent\"]),\\n      .djs-container svg ellipse:not([fill=\"none\"]):not([fill=\"transparent\"]),\\n      .djs-container svg polygon:not([fill=\"none\"]):not([fill=\"transparent\"]) {\\n        fill: ').concat(isDark ? \"#1f2937\" : \"#ffffff\", \" !important;\\n      }\\n      \\n      /* Ensure text is always visible */\\n      .djs-container svg text,\\n      .djs-container svg tspan {\\n        fill: \").concat(isDark ? \"#ffffff\" : \"#000000\", \" !important;\\n      }\\n      \\n      /* SUPER AGGRESSIVE: Override ANY stroke attribute in dark mode */\\n      \").concat(isDark ? '\\n        .djs-container svg *:not([stroke=\"none\"]):not([stroke=\"transparent\"]) {\\n          stroke: #ffffff !important;\\n        }\\n        \\n        .djs-container svg path:not([stroke=\"none\"]):not([stroke=\"transparent\"]) {\\n          stroke: #ffffff !important;\\n        }\\n        \\n        .djs-container svg line:not([stroke=\"none\"]):not([stroke=\"transparent\"]) {\\n          stroke: #ffffff !important;\\n        }\\n        \\n        .djs-container svg polyline:not([stroke=\"none\"]):not([stroke=\"transparent\"]) {\\n          stroke: #ffffff !important;\\n        }\\n        \\n        .djs-container svg rect:not([stroke=\"none\"]):not([stroke=\"transparent\"]) {\\n          stroke: #ffffff !important;\\n        }\\n        \\n        .djs-container svg circle:not([stroke=\"none\"]):not([stroke=\"transparent\"]) {\\n          stroke: #ffffff !important;\\n        }\\n        \\n        .djs-container svg ellipse:not([stroke=\"none\"]):not([stroke=\"transparent\"]) {\\n          stroke: #ffffff !important;\\n        }\\n        \\n        .djs-container svg polygon:not([stroke=\"none\"]):not([stroke=\"transparent\"]) {\\n          stroke: #ffffff !important;\\n        }\\n      ' : '\\n        .djs-container svg *:not([stroke=\"none\"]):not([stroke=\"transparent\"]) {\\n          stroke: #000000 !important;\\n        }\\n      ', \"\\n    \");\n            // Only append if not already in DOM\n            if (!style.parentNode) {\n                document.head.appendChild(style);\n            }\n            // Also add class to the canvas container for CSS targeting\n            if (container) {\n                if (isDark) {\n                    container.classList.add(\"dark-mode\");\n                    container.classList.remove(\"light-mode\");\n                } else {\n                    container.classList.add(\"light-mode\");\n                    container.classList.remove(\"dark-mode\");\n                }\n                // Directly set background on container and SVG\n                container.style.backgroundColor = isDark ? \"#111827\" : \"#f9fafb\";\n                const svgElement = container.querySelector(\"svg\");\n                if (svgElement) {\n                    svgElement.style.backgroundColor = isDark ? \"#111827\" : \"#f9fafb\";\n                }\n            }\n            // Force a redraw - but check if eventBus exists\n            const eventBus = modeler.get(\"eventBus\");\n            if (eventBus) {\n                eventBus.fire(\"canvas.viewbox.changed\");\n            }\n            // AGGRESSIVE FALLBACK: Force color updates on ALL elements\n            const forceColorUpdate = ()=>{\n                const svgElements = document.querySelectorAll(\".djs-container svg *\");\n                svgElements.forEach((el)=>{\n                    var _el_tagName;\n                    const tagName = (_el_tagName = el.tagName) === null || _el_tagName === void 0 ? void 0 : _el_tagName.toLowerCase();\n                    // FORCE stroke colors\n                    if (el.hasAttribute(\"stroke\") || el.style.stroke) {\n                        const currentStroke = el.getAttribute(\"stroke\") || el.style.stroke;\n                        if (currentStroke && currentStroke !== \"none\" && currentStroke !== \"transparent\") {\n                            // Check if it's a black stroke in dark mode or white in light mode (needs fixing)\n                            const needsFix = isDark && (currentStroke === \"#000000\" || currentStroke === \"black\" || currentStroke === \"rgb(0, 0, 0)\") || !isDark && (currentStroke === \"#ffffff\" || currentStroke === \"white\" || currentStroke === \"rgb(255, 255, 255)\");\n                            if (needsFix || tagName === \"rect\" || tagName === \"circle\" || tagName === \"polygon\" || tagName === \"path\" || tagName === \"line\") {\n                                const newStroke = isDark ? \"#ffffff\" : \"#000000\";\n                                el.setAttribute(\"stroke\", newStroke);\n                                el.style.stroke = newStroke;\n                                el.style.strokeOpacity = \"1\";\n                            }\n                        }\n                    }\n                    // FORCE fill colors for shapes\n                    if (tagName === \"rect\" || tagName === \"circle\" || tagName === \"ellipse\" || tagName === \"polygon\") {\n                        const currentFill = el.getAttribute(\"fill\") || el.style.fill;\n                        if (currentFill && currentFill !== \"none\" && currentFill !== \"transparent\") {\n                            // Skip selection boxes\n                            if (!el.closest(\".djs-outline\") && !el.closest(\".djs-selection\")) {\n                                const newFill = isDark ? \"#1f2937\" : \"#ffffff\";\n                                el.setAttribute(\"fill\", newFill);\n                                el.style.fill = newFill;\n                            }\n                        }\n                    }\n                    // Text and icons\n                    if (tagName === \"text\" || tagName === \"tspan\") {\n                        const newColor = isDark ? \"#ffffff\" : \"#000000\";\n                        el.setAttribute(\"fill\", newColor);\n                        el.style.fill = newColor;\n                    }\n                });\n            };\n            // Run multiple times to catch all updates\n            forceColorUpdate();\n            setTimeout(forceColorUpdate, 50);\n            setTimeout(forceColorUpdate, 100);\n            setTimeout(forceColorUpdate, 200);\n            setTimeout(forceColorUpdate, 500);\n        } catch (err) {\n            console.error(\"Error applying BPMN styles:\", err);\n        }\n    }, []);\n    // Initialize BPMN Modeler\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let mounted = true;\n        let modeler = null;\n        let observer = null;\n        const initBpmn = async ()=>{\n            const container = containerRef.current;\n            if (!container || !mounted) return;\n            try {\n                // Wait for container to have dimensions\n                if (container.offsetWidth === 0 || container.offsetHeight === 0) {\n                    setTimeout(initBpmn, 100);\n                    return;\n                }\n                // Create modeler with full default modules (including palette)\n                modeler = new bpmn_js_lib_Modeler__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({\n                    container: container,\n                    keyboard: {\n                        bindTo: window\n                    },\n                    // Ensure all default modules are enabled\n                    additionalModules: [],\n                    moddleExtensions: {}\n                });\n                modelerRef.current = modeler;\n                // Import default diagram\n                await modeler.importXML(DEFAULT_BPMN);\n                // Wait a bit for canvas to be fully initialized\n                await new Promise((resolve)=>setTimeout(resolve, 50));\n                // Setup command stack listeners - with safety checks\n                const eventBus = modeler.get(\"eventBus\");\n                const commandStack = modeler.get(\"commandStack\");\n                if (!eventBus || !commandStack) {\n                    console.warn(\"BPMN modules not fully initialized, retrying...\");\n                    setTimeout(initBpmn, 100);\n                    return;\n                }\n                const updateUndoRedo = ()=>{\n                    if (!mounted) return;\n                    setCanUndo(commandStack.canUndo());\n                    setCanRedo(commandStack.canRedo());\n                };\n                eventBus.on(\"commandStack.changed\", updateUndoRedo);\n                updateUndoRedo();\n                // Track selection changes for alignment tools\n                const selection = modeler.get(\"selection\");\n                eventBus.on(\"selection.changed\", (e)=>{\n                    if (!mounted) return;\n                    const elements = e.newSelection || [];\n                    setSelectedElements(elements);\n                    // Apply visual feedback for selection\n                    if (elements.length > 0) {\n                        console.log(\"Selected \".concat(elements.length, \" element(s)\"));\n                        // FORCE TRANSPARENCY: Remove any opaque selection boxes\n                        setTimeout(()=>{\n                            const selectionBoxes = document.querySelectorAll('.djs-outline rect, .djs-selection rect, [class*=\"select\"] rect');\n                            selectionBoxes.forEach((box)=>{\n                                // Skip actual shape rectangles\n                                if (box.closest(\".djs-visual\")) return;\n                                // Force transparent fill\n                                box.style.fill = \"transparent\";\n                                box.style.fillOpacity = \"0\";\n                                box.setAttribute(\"fill\", \"none\");\n                                box.setAttribute(\"fill-opacity\", \"0\");\n                            });\n                            // Also check for any selection frames\n                            const frames = document.querySelectorAll(\".djs-frame, .djs-selection-frame, .djs-select-visual\");\n                            frames.forEach((frame)=>{\n                                if (frame.tagName === \"rect\" || frame.querySelector(\"rect\")) {\n                                    const rect = frame.tagName === \"rect\" ? frame : frame.querySelector(\"rect\");\n                                    if (rect && !rect.closest(\".djs-visual\")) {\n                                        rect.style.fill = \"transparent\";\n                                        rect.setAttribute(\"fill\", \"none\");\n                                    }\n                                }\n                            });\n                        }, 0);\n                    }\n                });\n                // Add keyboard shortcuts\n                const keyboard = modeler.get(\"keyboard\");\n                const editorActions = modeler.get(\"editorActions\");\n                if (keyboard && editorActions) {\n                    // Register Ctrl+A for select all\n                    editorActions.register(\"selectAll\", ()=>{\n                        const elementRegistry = modeler.get(\"elementRegistry\");\n                        const allElements = elementRegistry.filter((element)=>{\n                            return element.type !== \"label\" && element.type !== \"bpmn:SequenceFlow\" && element.id !== \"Process_1\" && !element.labelTarget;\n                        });\n                        selection.select(allElements);\n                        console.log(\"Selected all \".concat(allElements.length, \" elements\"));\n                    });\n                    // Bind keyboard shortcut\n                    keyboard.addListener((context)=>{\n                        // Ctrl+A or Cmd+A\n                        if ((context.keyEvent.ctrlKey || context.keyEvent.metaKey) && context.keyEvent.key === \"a\") {\n                            editorActions.trigger(\"selectAll\");\n                            context.keyEvent.preventDefault();\n                            return true;\n                        }\n                    });\n                }\n                // Apply initial styles\n                applyBpmnStyles(modeler, theme);\n                // Apply initial grid state\n                const canvas = modeler.get(\"canvas\");\n                const canvasContainer = canvas._container || canvas.getContainer();\n                if (canvasContainer && showGrid) {\n                    canvasContainer.classList.add(\"show-grid\");\n                }\n                // Set up MutationObserver to catch dynamically added elements\n                if (canvasContainer) {\n                    observer = new MutationObserver((mutations)=>{\n                        const currentTheme = document.documentElement.classList.contains(\"dark\") ? \"dark\" : \"light\";\n                        const isDarkMode = currentTheme === \"dark\";\n                        mutations.forEach((mutation)=>{\n                            // Process added nodes\n                            mutation.addedNodes.forEach((node)=>{\n                                if (node.nodeType === 1) {\n                                    // Process the node itself if it's an SVG element\n                                    if (node.tagName) {\n                                        const tagName = node.tagName.toLowerCase();\n                                        // IMMEDIATE fix for rectangles (Tasks)\n                                        if (tagName === \"rect\" || tagName === \"g\" || tagName === \"svg\") {\n                                            // Fix the node itself\n                                            if (tagName === \"rect\") {\n                                                node.style.stroke = isDarkMode ? \"#ffffff\" : \"#000000\";\n                                                node.setAttribute(\"stroke\", isDarkMode ? \"#ffffff\" : \"#000000\");\n                                                if (!node.closest(\".djs-outline\") && !node.closest(\".djs-selection\")) {\n                                                    node.style.fill = isDarkMode ? \"#1f2937\" : \"#ffffff\";\n                                                    node.setAttribute(\"fill\", isDarkMode ? \"#1f2937\" : \"#ffffff\");\n                                                }\n                                            }\n                                            // Fix all rect children\n                                            const rects = node.querySelectorAll ? node.querySelectorAll(\"rect\") : [];\n                                            rects.forEach((rect)=>{\n                                                rect.style.stroke = isDarkMode ? \"#ffffff\" : \"#000000\";\n                                                rect.setAttribute(\"stroke\", isDarkMode ? \"#ffffff\" : \"#000000\");\n                                                rect.style.strokeOpacity = \"1\";\n                                                if (!rect.closest(\".djs-outline\") && !rect.closest(\".djs-selection\")) {\n                                                    rect.style.fill = isDarkMode ? \"#1f2937\" : \"#ffffff\";\n                                                    rect.setAttribute(\"fill\", isDarkMode ? \"#1f2937\" : \"#ffffff\");\n                                                }\n                                            });\n                                        }\n                                        // Process all descendants\n                                        if (node.querySelectorAll) {\n                                            const elements = node.querySelectorAll(\"*\");\n                                            elements.forEach((el)=>{\n                                                var _el_tagName;\n                                                const elTag = (_el_tagName = el.tagName) === null || _el_tagName === void 0 ? void 0 : _el_tagName.toLowerCase();\n                                                // Force colors on all shape elements\n                                                if (elTag === \"rect\" || elTag === \"circle\" || elTag === \"polygon\" || elTag === \"path\" || elTag === \"line\") {\n                                                    if (el.hasAttribute(\"stroke\") || el.style.stroke) {\n                                                        el.style.stroke = isDarkMode ? \"#ffffff\" : \"#000000\";\n                                                        el.setAttribute(\"stroke\", isDarkMode ? \"#ffffff\" : \"#000000\");\n                                                        el.style.strokeOpacity = \"1\";\n                                                    }\n                                                    if ((elTag === \"rect\" || elTag === \"circle\" || elTag === \"polygon\") && !el.closest(\".djs-outline\") && !el.closest(\".djs-selection\")) {\n                                                        el.style.fill = isDarkMode ? \"#1f2937\" : \"#ffffff\";\n                                                        el.setAttribute(\"fill\", isDarkMode ? \"#1f2937\" : \"#ffffff\");\n                                                    }\n                                                }\n                                            });\n                                        }\n                                    }\n                                }\n                            });\n                            // Also check attribute changes for stroke/fill\n                            if (mutation.type === \"attributes\" && mutation.target) {\n                                const target = mutation.target;\n                                if (target.tagName) {\n                                    const tagName = target.tagName.toLowerCase();\n                                    if (tagName === \"rect\" && (mutation.attributeName === \"stroke\" || mutation.attributeName === \"style\")) {\n                                        // Force correct color if it was changed to wrong color\n                                        const currentStroke = target.getAttribute(\"stroke\") || target.style.stroke;\n                                        if (isDarkMode && (currentStroke === \"#000000\" || currentStroke === \"black\")) {\n                                            target.style.stroke = \"#ffffff\";\n                                            target.setAttribute(\"stroke\", \"#ffffff\");\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                    });\n                    observer.observe(canvasContainer, {\n                        childList: true,\n                        subtree: true,\n                        attributes: true,\n                        attributeFilter: [\n                            \"stroke\",\n                            \"fill\",\n                            \"style\"\n                        ]\n                    });\n                }\n                setIsReady(true);\n                setError(null);\n            } catch (err) {\n                console.error(\"BPMN initialization error:\", err);\n                setError(err instanceof Error ? err.message : \"Failed to initialize\");\n            }\n        };\n        // Start initialization after a small delay\n        setTimeout(initBpmn, 100);\n        return ()=>{\n            mounted = false;\n            if (observer) {\n                observer.disconnect();\n            }\n            if (modeler) {\n                try {\n                    modeler.destroy();\n                } catch (e) {\n                // Ignore cleanup errors\n                }\n            }\n        };\n    }, [\n        theme,\n        applyBpmnStyles\n    ]);\n    // Re-apply styles when theme changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (modelerRef.current && isReady) {\n            applyBpmnStyles(modelerRef.current, theme);\n            // Also update grid if it's enabled\n            const canvas = modelerRef.current.get(\"canvas\");\n            const container = (canvas === null || canvas === void 0 ? void 0 : canvas._container) || (canvas === null || canvas === void 0 ? void 0 : canvas.getContainer());\n            if (container && showGrid) {\n                container.classList.add(\"show-grid\");\n            }\n            // AGGRESSIVE: Continuous Task fix for stubborn elements\n            const fixTaskColors = ()=>{\n                const isDark = theme === \"dark\";\n                const tasks = document.querySelectorAll('[data-element-id*=\"Task\"]');\n                tasks.forEach((task)=>{\n                    const rects = task.querySelectorAll(\"rect\");\n                    rects.forEach((rect)=>{\n                        // Check current color\n                        const currentStroke = rect.getAttribute(\"stroke\") || rect.style.stroke;\n                        const needsFix = isDark ? currentStroke === \"#000000\" || currentStroke === \"black\" || currentStroke === \"rgb(0, 0, 0)\" : currentStroke === \"#ffffff\" || currentStroke === \"white\" || currentStroke === \"rgb(255, 255, 255)\";\n                        if (needsFix) {\n                            console.log(\"Fixing Task stroke:\", currentStroke, \"→\", isDark ? \"#ffffff\" : \"#000000\");\n                            rect.setAttribute(\"stroke\", isDark ? \"#ffffff\" : \"#000000\");\n                            rect.style.stroke = isDark ? \"#ffffff\" : \"#000000\";\n                            rect.style.strokeOpacity = \"1\";\n                            if (!rect.closest(\".djs-outline\")) {\n                                rect.setAttribute(\"fill\", isDark ? \"#1f2937\" : \"#ffffff\");\n                                rect.style.fill = isDark ? \"#1f2937\" : \"#ffffff\";\n                            }\n                        }\n                    });\n                });\n            };\n            // Run multiple times to catch stubborn elements\n            const intervals = [\n                0,\n                100,\n                200,\n                500,\n                1000,\n                2000\n            ];\n            intervals.forEach((delay)=>{\n                setTimeout(fixTaskColors, delay);\n            });\n        }\n    }, [\n        theme,\n        isReady,\n        showGrid,\n        applyBpmnStyles\n    ]);\n    // Handlers\n    const handleSave = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (!modelerRef.current) return;\n        setSaving(true);\n        try {\n            const { xml } = await modelerRef.current.saveXML({\n                format: true\n            });\n            localStorage.setItem(\"bpmn-diagram\", xml || \"\");\n            console.log(\"Saved to localStorage\");\n        } catch (err) {\n            console.error(\"Save error:\", err);\n        } finally{\n            setSaving(false);\n        }\n    }, []);\n    const handleExport = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (!modelerRef.current) return;\n        try {\n            var _prompt;\n            const { xml } = await modelerRef.current.saveXML({\n                format: true\n            });\n            // Show export format options\n            const format = (_prompt = prompt(\"Export format: xml, json, or yaml?\", \"xml\")) === null || _prompt === void 0 ? void 0 : _prompt.toLowerCase();\n            let content = xml || \"\";\n            let filename = \"diagram.bpmn\";\n            let mimeType = \"text/xml\";\n            if (format === \"json\") {\n                var _xmlDoc_querySelector;\n                // Convert XML to JSON representation\n                const parser = new DOMParser();\n                const xmlDoc = parser.parseFromString(xml || \"\", \"text/xml\");\n                const jsonData = {\n                    type: \"bpmn:definitions\",\n                    process: ((_xmlDoc_querySelector = xmlDoc.querySelector(\"process\")) === null || _xmlDoc_querySelector === void 0 ? void 0 : _xmlDoc_querySelector.getAttribute(\"id\")) || \"Process_1\",\n                    elements: Array.from(xmlDoc.querySelectorAll(\"*[id]\")).map((el)=>({\n                            id: el.getAttribute(\"id\"),\n                            type: el.tagName,\n                            name: el.getAttribute(\"name\") || \"\"\n                        }))\n                };\n                content = JSON.stringify(jsonData, null, 2);\n                filename = \"diagram.json\";\n                mimeType = \"application/json\";\n            } else if (format === \"yaml\" || format === \"yml\") {\n                var _xmlDoc_querySelector1;\n                // Simple YAML conversion (would need proper library for production)\n                const parser = new DOMParser();\n                const xmlDoc = parser.parseFromString(xml || \"\", \"text/xml\");\n                let yamlContent = \"type: bpmn:definitions\\n\";\n                yamlContent += \"process: \".concat(((_xmlDoc_querySelector1 = xmlDoc.querySelector(\"process\")) === null || _xmlDoc_querySelector1 === void 0 ? void 0 : _xmlDoc_querySelector1.getAttribute(\"id\")) || \"Process_1\", \"\\n\");\n                yamlContent += \"elements:\\n\";\n                xmlDoc.querySelectorAll(\"*[id]\").forEach((el)=>{\n                    yamlContent += \"  - id: \".concat(el.getAttribute(\"id\"), \"\\n\");\n                    yamlContent += \"    type: \".concat(el.tagName, \"\\n\");\n                    const name = el.getAttribute(\"name\");\n                    if (name) yamlContent += \"    name: \".concat(name, \"\\n\");\n                });\n                content = yamlContent;\n                filename = \"diagram.yaml\";\n                mimeType = \"text/yaml\";\n            }\n            const blob = new Blob([\n                content\n            ], {\n                type: mimeType\n            });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = filename;\n            a.click();\n            URL.revokeObjectURL(url);\n        } catch (err) {\n            console.error(\"Export error:\", err);\n        }\n    }, []);\n    const handleImport = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e)=>{\n        var _e_target_files;\n        const file = (_e_target_files = e.target.files) === null || _e_target_files === void 0 ? void 0 : _e_target_files[0];\n        if (!file || !modelerRef.current) return;\n        const reader = new FileReader();\n        reader.onload = async (event)=>{\n            try {\n                var _event_target, _file_name_split_pop, _modelerRef_current;\n                const content = (_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.result;\n                let xml = content;\n                // Check file extension to determine format\n                const ext = (_file_name_split_pop = file.name.split(\".\").pop()) === null || _file_name_split_pop === void 0 ? void 0 : _file_name_split_pop.toLowerCase();\n                if (ext === \"json\") {\n                    // Convert JSON back to BPMN XML (simplified)\n                    const jsonData = JSON.parse(content);\n                    xml = DEFAULT_BPMN // Start with default and modify\n                    ;\n                    console.log(\"Importing JSON format:\", jsonData);\n                    // Would need proper JSON to BPMN conversion\n                    alert(\"JSON import: Elements detected, using default template. Full JSON import requires custom parser.\");\n                } else if (ext === \"yaml\" || ext === \"yml\") {\n                    // Convert YAML back to BPMN XML (simplified)\n                    console.log(\"Importing YAML format\");\n                    xml = DEFAULT_BPMN // Start with default\n                    ;\n                    alert(\"YAML import: Using default template. Full YAML import requires yaml parser library.\");\n                }\n                await ((_modelerRef_current = modelerRef.current) === null || _modelerRef_current === void 0 ? void 0 : _modelerRef_current.importXML(xml));\n            } catch (err) {\n                console.error(\"Import error:\", err);\n                alert(\"Import failed: \" + (err instanceof Error ? err.message : \"Unknown error\"));\n            }\n        };\n        reader.readAsText(file);\n    }, []);\n    const handleUndo = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        var _modelerRef_current;\n        const commandStack = (_modelerRef_current = modelerRef.current) === null || _modelerRef_current === void 0 ? void 0 : _modelerRef_current.get(\"commandStack\");\n        if (commandStack === null || commandStack === void 0 ? void 0 : commandStack.canUndo()) {\n            commandStack.undo();\n        }\n    }, []);\n    const handleRedo = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        var _modelerRef_current;\n        const commandStack = (_modelerRef_current = modelerRef.current) === null || _modelerRef_current === void 0 ? void 0 : _modelerRef_current.get(\"commandStack\");\n        if (commandStack === null || commandStack === void 0 ? void 0 : commandStack.canRedo()) {\n            commandStack.redo();\n        }\n    }, []);\n    const handleZoomIn = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!modelerRef.current) return;\n        try {\n            var _canvas__container;\n            const canvas = modelerRef.current.get(\"canvas\");\n            if (!canvas) return;\n            // Ensure SVG context is available\n            const svg = canvas._svg || ((_canvas__container = canvas._container) === null || _canvas__container === void 0 ? void 0 : _canvas__container.querySelector(\"svg\"));\n            if (!svg || !svg.createSVGMatrix) {\n                console.warn(\"SVG not ready for zoom\");\n                return;\n            }\n            const currentZoom = canvas.zoom();\n            if (typeof currentZoom === \"number\") {\n                const newZoom = Math.min(currentZoom * 1.2, 4);\n                canvas.zoom(newZoom);\n                setZoomLevel(Math.round(newZoom * 100));\n            }\n        } catch (err) {\n            console.error(\"Zoom in error:\", err);\n        }\n    }, []);\n    const handleZoomOut = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!modelerRef.current) return;\n        try {\n            var _canvas__container;\n            const canvas = modelerRef.current.get(\"canvas\");\n            if (!canvas) return;\n            // Ensure SVG context is available\n            const svg = canvas._svg || ((_canvas__container = canvas._container) === null || _canvas__container === void 0 ? void 0 : _canvas__container.querySelector(\"svg\"));\n            if (!svg || !svg.createSVGMatrix) {\n                console.warn(\"SVG not ready for zoom\");\n                return;\n            }\n            const currentZoom = canvas.zoom();\n            if (typeof currentZoom === \"number\") {\n                const newZoom = Math.max(currentZoom / 1.2, 0.2);\n                canvas.zoom(newZoom);\n                setZoomLevel(Math.round(newZoom * 100));\n            }\n        } catch (err) {\n            console.error(\"Zoom out error:\", err);\n        }\n    }, []);\n    const handleZoomReset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!modelerRef.current) return;\n        try {\n            var _canvas__container;\n            const canvas = modelerRef.current.get(\"canvas\");\n            if (!canvas) return;\n            // Ensure SVG context is available\n            const svg = canvas._svg || ((_canvas__container = canvas._container) === null || _canvas__container === void 0 ? void 0 : _canvas__container.querySelector(\"svg\"));\n            if (!svg || !svg.createSVGMatrix) {\n                console.warn(\"SVG not ready for zoom\");\n                return;\n            }\n            canvas.zoom(\"fit-viewport\");\n            setZoomLevel(100);\n        } catch (err) {\n            console.error(\"Zoom reset error:\", err);\n        }\n    }, []);\n    const handleClear = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (!modelerRef.current) return;\n        if (confirm(\"Clear the entire diagram?\")) {\n            await modelerRef.current.importXML(DEFAULT_BPMN);\n        }\n    }, []);\n    const handleThemeToggle = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n        console.log(\"Theme toggle:\", theme, \"->\", newTheme);\n        setTheme(newTheme) // ThemeProvider handles DOM manipulation\n        ;\n        // Re-apply BPMN styles with new theme\n        if (modelerRef.current) {\n            // Apply new styles (this will update the existing style element)\n            applyBpmnStyles(modelerRef.current, newTheme);\n            // IMMEDIATE: Force direct SVG manipulation for instant color change\n            const forceColorUpdate = ()=>{\n                const isDarkMode = newTheme === \"dark\";\n                const svgElements = document.querySelectorAll(\".djs-container svg *\");\n                svgElements.forEach((el)=>{\n                    // Update stroke attributes\n                    if (el.hasAttribute(\"stroke\")) {\n                        const stroke = el.getAttribute(\"stroke\");\n                        if (stroke && stroke !== \"none\" && stroke !== \"transparent\") {\n                            // Force white in dark mode, black in light mode\n                            el.style.stroke = isDarkMode ? \"#ffffff\" : \"#000000\";\n                            el.setAttribute(\"stroke\", isDarkMode ? \"#ffffff\" : \"#000000\");\n                        }\n                    }\n                    // Update fill attributes\n                    if (el.hasAttribute(\"fill\")) {\n                        const fill = el.getAttribute(\"fill\");\n                        if (fill && fill !== \"none\" && fill !== \"transparent\") {\n                            // Shapes get background color\n                            if (el.tagName === \"rect\" || el.tagName === \"circle\" || el.tagName === \"ellipse\" || el.tagName === \"polygon\") {\n                                el.style.fill = isDarkMode ? \"#1f2937\" : \"#ffffff\";\n                                el.setAttribute(\"fill\", isDarkMode ? \"#1f2937\" : \"#ffffff\");\n                            } else if (el.tagName === \"text\" || el.tagName === \"tspan\" || el.tagName === \"path\") {\n                                el.style.fill = isDarkMode ? \"#ffffff\" : \"#000000\";\n                                el.setAttribute(\"fill\", isDarkMode ? \"#ffffff\" : \"#000000\");\n                            }\n                        }\n                    }\n                    // Also set style attribute to override any inline styles\n                    if (el.tagName === \"rect\" || el.tagName === \"circle\" || el.tagName === \"ellipse\" || el.tagName === \"polygon\" || el.tagName === \"path\" || el.tagName === \"line\" || el.tagName === \"polyline\") {\n                        if (!el.getAttribute(\"stroke-opacity\") || el.getAttribute(\"stroke-opacity\") !== \"0\") {\n                            el.style.stroke = isDarkMode ? \"#ffffff\" : \"#000000\";\n                        }\n                    }\n                });\n            };\n            // Execute immediately and after a short delay\n            forceColorUpdate();\n            setTimeout(forceColorUpdate, 100);\n            setTimeout(forceColorUpdate, 300);\n            // Force a complete redraw using a safer method\n            try {\n                const canvas = modelerRef.current.get(\"canvas\");\n                const eventBus = modelerRef.current.get(\"eventBus\");\n                if (canvas && eventBus) {\n                    // Get the current viewbox to preserve position\n                    const viewbox = canvas.viewbox();\n                    // Directly update canvas container background\n                    const container = canvas._container || canvas.getContainer();\n                    if (container) {\n                        const bgColor = newTheme === \"dark\" ? \"#111827\" : \"#f9fafb\";\n                        container.style.backgroundColor = bgColor;\n                        // Update SVG background\n                        const svg = container.querySelector(\"svg\");\n                        if (svg) {\n                            svg.style.backgroundColor = bgColor;\n                        }\n                        // Update any viewport elements\n                        const viewport = container.querySelector(\".djs-viewport\");\n                        if (viewport) {\n                            viewport.style.backgroundColor = bgColor;\n                        }\n                        // Preserve grid state after theme change\n                        if (showGrid) {\n                            container.classList.add(\"show-grid\");\n                        }\n                    }\n                    // Simply trigger a canvas refresh without manipulating elements\n                    // The styles will be re-applied through the style element update\n                    requestAnimationFrame(()=>{\n                        if (eventBus) {\n                            // Just fire a viewbox change to refresh the rendering\n                            eventBus.fire(\"canvas.viewbox.changed\", viewbox);\n                        }\n                    });\n                }\n            } catch (err) {\n                console.error(\"Theme toggle redraw error:\", err);\n            }\n        }\n    }, [\n        theme,\n        applyBpmnStyles\n    ]);\n    // Alignment handlers\n    const handleAlignLeft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!modelerRef.current || selectedElements.length < 2) return;\n        const modeling1 = modelerRef.current.get(\"modeling\");\n        const canvas = modelerRef.current.get(\"canvas\");\n        // Find leftmost element\n        const leftMost = selectedElements.reduce((min, el)=>el.x < min.x ? el : min, selectedElements[0]);\n        // Align all elements to leftmost\n        selectedElements.forEach((el)=>{\n            if (el.id !== leftMost.id) {\n                modeling1.moveElements([\n                    el\n                ], {\n                    x: leftMost.x - el.x,\n                    y: 0\n                });\n            }\n        });\n    }, [\n        selectedElements\n    ]);\n    const handleAlignCenter = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!modelerRef.current || selectedElements.length < 2) return;\n        const modeling1 = modelerRef.current.get(\"modeling\");\n        // Calculate center position\n        const centerX = selectedElements.reduce((sum, el)=>sum + el.x + el.width / 2, 0) / selectedElements.length;\n        // Align all elements to center\n        selectedElements.forEach((el)=>{\n            const targetX = centerX - el.width / 2;\n            modeling1.moveElements([\n                el\n            ], {\n                x: targetX - el.x,\n                y: 0\n            });\n        });\n    }, [\n        selectedElements\n    ]);\n    const handleAlignRight = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!modelerRef.current || selectedElements.length < 2) return;\n        const modeling1 = modelerRef.current.get(\"modeling\");\n        // Find rightmost element\n        const rightMost = selectedElements.reduce((max, el)=>el.x + el.width > max.x + max.width ? el : max, selectedElements[0]);\n        const rightEdge = rightMost.x + rightMost.width;\n        // Align all elements to rightmost\n        selectedElements.forEach((el)=>{\n            if (el.id !== rightMost.id) {\n                const targetX = rightEdge - el.width;\n                modeling1.moveElements([\n                    el\n                ], {\n                    x: targetX - el.x,\n                    y: 0\n                });\n            }\n        });\n    }, [\n        selectedElements\n    ]);\n    const handleAlignTop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!modelerRef.current || selectedElements.length < 2) return;\n        const modeling1 = modelerRef.current.get(\"modeling\");\n        // Find topmost element\n        const topMost = selectedElements.reduce((min, el)=>el.y < min.y ? el : min, selectedElements[0]);\n        // Align all elements to topmost\n        selectedElements.forEach((el)=>{\n            if (el.id !== topMost.id) {\n                modeling1.moveElements([\n                    el\n                ], {\n                    x: 0,\n                    y: topMost.y - el.y\n                });\n            }\n        });\n    }, [\n        selectedElements\n    ]);\n    const handleAlignMiddle = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!modelerRef.current || selectedElements.length < 2) return;\n        const modeling1 = modelerRef.current.get(\"modeling\");\n        // Calculate middle position\n        const middleY = selectedElements.reduce((sum, el)=>sum + el.y + el.height / 2, 0) / selectedElements.length;\n        // Align all elements to middle\n        selectedElements.forEach((el)=>{\n            const targetY = middleY - el.height / 2;\n            modeling1.moveElements([\n                el\n            ], {\n                x: 0,\n                y: targetY - el.y\n            });\n        });\n    }, [\n        selectedElements\n    ]);\n    const handleAlignBottom = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!modelerRef.current || selectedElements.length < 2) return;\n        const modeling1 = modelerRef.current.get(\"modeling\");\n        // Find bottommost element\n        const bottomMost = selectedElements.reduce((max, el)=>el.y + el.height > max.y + max.height ? el : max, selectedElements[0]);\n        const bottomEdge = bottomMost.y + bottomMost.height;\n        // Align all elements to bottommost\n        selectedElements.forEach((el)=>{\n            if (el.id !== bottomMost.id) {\n                const targetY = bottomEdge - el.height;\n                modeling1.moveElements([\n                    el\n                ], {\n                    x: 0,\n                    y: targetY - el.y\n                });\n            }\n        });\n    }, [\n        selectedElements\n    ]);\n    // Preview handler - opens XML viewer modal\n    const handlePreview = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (!modelerRef.current) return;\n        try {\n            const { xml } = await modelerRef.current.saveXML({\n                format: true\n            });\n            setCurrentXml(xml || \"\");\n            setShowXmlViewer(true);\n        } catch (err) {\n            console.error(\"Preview error:\", err);\n        }\n    }, []);\n    // Handle XML save from viewer\n    const handleXmlSave = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (newXml)=>{\n        if (!modelerRef.current) return;\n        try {\n            await modelerRef.current.importXML(newXml);\n            setShowXmlViewer(false);\n        } catch (err) {\n            console.error(\"XML import error:\", err);\n            alert(\"Failed to apply XML changes: \" + (err instanceof Error ? err.message : \"Unknown error\"));\n        }\n    }, []);\n    // Run Process handler (simulation)\n    const handleRunProcess = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!modelerRef.current) return;\n        console.log(\"Starting process simulation...\");\n        // This would integrate with a BPMN engine for execution\n        alert(\"Process simulation would start here. This requires integration with a BPMN engine.\");\n    }, []);\n    // Meeting/Presentation Mode handler\n    const handleMeetingMode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setIsMeetingMode(!isMeetingMode);\n        if (!isMeetingMode) {\n            // Enter presentation mode - hide palette, maximize canvas\n            document.documentElement.requestFullscreen();\n        } else {\n            // Exit presentation mode\n            if (document.fullscreenElement) {\n                document.exitFullscreen();\n            }\n        }\n    }, [\n        isMeetingMode\n    ]);\n    // Minimap toggle handler\n    const handleToggleMinimap = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setIsMinimapOpen(!isMinimapOpen);\n        // BPMN.js doesn't have built-in minimap, would need custom implementation\n        console.log(\"Minimap toggle:\", !isMinimapOpen);\n    }, [\n        isMinimapOpen\n    ]);\n    // Language toggle handler\n    const handleToggleLanguage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        // Would implement i18n here\n        console.log(\"Language toggle - would implement i18n\");\n        alert(\"Language switching would be implemented with i18n library\");\n    }, []);\n    // Grid toggle handler\n    const handleToggleGrid = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setShowGrid((prev)=>{\n            const newValue = !prev;\n            // Apply or remove grid class to canvas container\n            if (modelerRef.current) {\n                const canvas = modelerRef.current.get(\"canvas\");\n                const container = canvas._container || canvas.getContainer();\n                if (container) {\n                    if (newValue) {\n                        container.classList.add(\"show-grid\");\n                    } else {\n                        container.classList.remove(\"show-grid\");\n                    }\n                }\n            }\n            return newValue;\n        });\n    }, []);\n    // Handle palette actions\n    const handlePaletteAction = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((action, event)=>{\n        if (!modelerRef.current) return;\n        console.log(\"Palette action:\", action);\n        // Handle tool actions\n        if (action.endsWith(\"-tool\")) {\n            setActiveTool(action.replace(\"-tool\", \"\"));\n            // Activate the tool in BPMN.js\n            const handTool = modelerRef.current.get(\"handTool\");\n            const lassoTool = modelerRef.current.get(\"lassoTool\");\n            const spaceTool = modelerRef.current.get(\"spaceTool\");\n            const globalConnect = modelerRef.current.get(\"globalConnect\");\n            switch(action){\n                case \"hand-tool\":\n                    handTool === null || handTool === void 0 ? void 0 : handTool.activateHand(event);\n                    break;\n                case \"lasso-tool\":\n                    lassoTool === null || lassoTool === void 0 ? void 0 : lassoTool.activateSelection(event);\n                    break;\n                case \"space-tool\":\n                    spaceTool === null || spaceTool === void 0 ? void 0 : spaceTool.activateSelection(event);\n                    break;\n                case \"global-connect-tool\":\n                    globalConnect === null || globalConnect === void 0 ? void 0 : globalConnect.toggle(event);\n                    break;\n            }\n            return;\n        }\n        // Handle element creation\n        if (action.startsWith(\"create.\")) {\n            const elementFactory = modelerRef.current.get(\"elementFactory\");\n            const create = modelerRef.current.get(\"create\");\n            const canvas = modelerRef.current.get(\"canvas\");\n            // Parse the element type from action (keep original format)\n            const elementType = action.replace(\"create.\", \"\");\n            console.log(\"Creating element type:\", elementType);\n            let type = \"bpmn:Task\" // default\n            ;\n            let eventDefinitionType = undefined;\n            // Map all possible actions to BPMN types (matching registry actions)\n            const typeMap = {\n                // Start Events\n                \"start-event\": {\n                    type: \"bpmn:StartEvent\"\n                },\n                \"start-event-message\": {\n                    type: \"bpmn:StartEvent\",\n                    eventDefinitionType: \"bpmn:MessageEventDefinition\"\n                },\n                \"start-event-timer\": {\n                    type: \"bpmn:StartEvent\",\n                    eventDefinitionType: \"bpmn:TimerEventDefinition\"\n                },\n                \"start-event-conditional\": {\n                    type: \"bpmn:StartEvent\",\n                    eventDefinitionType: \"bpmn:ConditionalEventDefinition\"\n                },\n                \"start-event-signal\": {\n                    type: \"bpmn:StartEvent\",\n                    eventDefinitionType: \"bpmn:SignalEventDefinition\"\n                },\n                // End Events\n                \"end-event\": {\n                    type: \"bpmn:EndEvent\"\n                },\n                \"end-event-message\": {\n                    type: \"bpmn:EndEvent\",\n                    eventDefinitionType: \"bpmn:MessageEventDefinition\"\n                },\n                \"end-event-escalation\": {\n                    type: \"bpmn:EndEvent\",\n                    eventDefinitionType: \"bpmn:EscalationEventDefinition\"\n                },\n                \"end-event-error\": {\n                    type: \"bpmn:EndEvent\",\n                    eventDefinitionType: \"bpmn:ErrorEventDefinition\"\n                },\n                \"end-event-cancel\": {\n                    type: \"bpmn:EndEvent\",\n                    eventDefinitionType: \"bpmn:CancelEventDefinition\"\n                },\n                \"end-event-compensation\": {\n                    type: \"bpmn:EndEvent\",\n                    eventDefinitionType: \"bpmn:CompensateEventDefinition\"\n                },\n                \"end-event-signal\": {\n                    type: \"bpmn:EndEvent\",\n                    eventDefinitionType: \"bpmn:SignalEventDefinition\"\n                },\n                \"end-event-terminate\": {\n                    type: \"bpmn:EndEvent\",\n                    eventDefinitionType: \"bpmn:TerminateEventDefinition\"\n                },\n                // Intermediate Events\n                \"intermediate-event\": {\n                    type: \"bpmn:IntermediateThrowEvent\"\n                },\n                \"intermediate-event-message\": {\n                    type: \"bpmn:IntermediateThrowEvent\",\n                    eventDefinitionType: \"bpmn:MessageEventDefinition\"\n                },\n                \"intermediate-event-timer\": {\n                    type: \"bpmn:IntermediateCatchEvent\",\n                    eventDefinitionType: \"bpmn:TimerEventDefinition\"\n                },\n                \"intermediate-event-escalation\": {\n                    type: \"bpmn:IntermediateThrowEvent\",\n                    eventDefinitionType: \"bpmn:EscalationEventDefinition\"\n                },\n                \"intermediate-event-conditional\": {\n                    type: \"bpmn:IntermediateCatchEvent\",\n                    eventDefinitionType: \"bpmn:ConditionalEventDefinition\"\n                },\n                \"intermediate-event-link\": {\n                    type: \"bpmn:IntermediateThrowEvent\",\n                    eventDefinitionType: \"bpmn:LinkEventDefinition\"\n                },\n                \"intermediate-event-compensation\": {\n                    type: \"bpmn:IntermediateThrowEvent\",\n                    eventDefinitionType: \"bpmn:CompensateEventDefinition\"\n                },\n                \"intermediate-event-signal\": {\n                    type: \"bpmn:IntermediateThrowEvent\",\n                    eventDefinitionType: \"bpmn:SignalEventDefinition\"\n                },\n                // Tasks\n                \"task\": {\n                    type: \"bpmn:Task\"\n                },\n                \"user-task\": {\n                    type: \"bpmn:UserTask\"\n                },\n                \"service-task\": {\n                    type: \"bpmn:ServiceTask\"\n                },\n                \"script-task\": {\n                    type: \"bpmn:ScriptTask\"\n                },\n                \"business-rule-task\": {\n                    type: \"bpmn:BusinessRuleTask\"\n                },\n                \"send-task\": {\n                    type: \"bpmn:SendTask\"\n                },\n                \"receive-task\": {\n                    type: \"bpmn:ReceiveTask\"\n                },\n                \"manual-task\": {\n                    type: \"bpmn:ManualTask\"\n                },\n                // Gateways\n                \"exclusive-gateway\": {\n                    type: \"bpmn:ExclusiveGateway\"\n                },\n                \"parallel-gateway\": {\n                    type: \"bpmn:ParallelGateway\"\n                },\n                \"inclusive-gateway\": {\n                    type: \"bpmn:InclusiveGateway\"\n                },\n                \"event-based-gateway\": {\n                    type: \"bpmn:EventBasedGateway\"\n                },\n                \"complex-gateway\": {\n                    type: \"bpmn:ComplexGateway\"\n                },\n                // Sub Process\n                \"subprocess-expanded\": {\n                    type: \"bpmn:SubProcess\",\n                    isExpanded: true\n                },\n                \"subprocess-collapsed\": {\n                    type: \"bpmn:SubProcess\",\n                    isExpanded: false\n                },\n                \"event-subprocess\": {\n                    type: \"bpmn:SubProcess\",\n                    triggeredByEvent: true\n                },\n                \"transaction\": {\n                    type: \"bpmn:Transaction\"\n                },\n                \"call-activity\": {\n                    type: \"bpmn:CallActivity\"\n                },\n                // Data\n                \"data-object\": {\n                    type: \"bpmn:DataObjectReference\"\n                },\n                \"data-store\": {\n                    type: \"bpmn:DataStoreReference\"\n                },\n                \"data-input\": {\n                    type: \"bpmn:DataInput\"\n                },\n                \"data-output\": {\n                    type: \"bpmn:DataOutput\"\n                },\n                // Participants\n                \"participant-expanded\": {\n                    type: \"bpmn:Participant\"\n                },\n                \"participant\": {\n                    type: \"bpmn:Participant\"\n                },\n                \"lane\": {\n                    type: \"bpmn:Lane\"\n                },\n                // Artifacts\n                \"group\": {\n                    type: \"bpmn:Group\"\n                },\n                \"text-annotation\": {\n                    type: \"bpmn:TextAnnotation\"\n                }\n            };\n            const elementConfig = typeMap[elementType] || {\n                type: \"bpmn:Task\"\n            };\n            // Create the shape with proper configuration\n            const shapeConfig = {\n                type: elementConfig.type\n            };\n            // Add event definition if needed\n            if (elementConfig.eventDefinitionType) {\n                const bpmnFactory = modelerRef.current.get(\"bpmnFactory\");\n                const eventDefinition = bpmnFactory.create(elementConfig.eventDefinitionType);\n                shapeConfig.eventDefinitionType = elementConfig.eventDefinitionType;\n                shapeConfig.businessObject = bpmnFactory.create(elementConfig.type, {\n                    eventDefinitions: [\n                        eventDefinition\n                    ]\n                });\n            }\n            // Handle expanded/collapsed state\n            if (\"isExpanded\" in elementConfig) {\n                shapeConfig.isExpanded = elementConfig.isExpanded;\n            }\n            if (\"triggeredByEvent\" in elementConfig) {\n                shapeConfig.triggeredByEvent = elementConfig.triggeredByEvent;\n            }\n            const shape = elementFactory.createShape(shapeConfig);\n            // If it's a drag event, use drag coordinates\n            if (event instanceof DragEvent) {\n                console.log(\"Starting drag create for:\", elementType);\n                // For drag events, we need to let BPMN.js handle the drop\n                // The create module expects the drag event to continue\n                create.start(event, shape);\n            } else {\n                // For click events, directly create the shape at a position\n                console.log(\"Creating element via click:\", elementType);\n                const rootElement = canvas.getRootElement();\n                const viewport = canvas.viewbox();\n                // Calculate center position accounting for current zoom\n                const centerX = viewport.x + viewport.width / 2;\n                const centerY = viewport.y + viewport.height / 2;\n                // Directly create the shape using modeling\n                modeling.createShape(shape, {\n                    x: centerX,\n                    y: centerY\n                }, rootElement);\n            }\n        }\n    }, []);\n    if (error) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"h-screen flex items-center justify-center bg-gray-50\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-xl font-semibold text-red-600 mb-2\",\n                        children: \"Error Loading Studio\"\n                    }, void 0, false, {\n                        fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                        lineNumber: 1737,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-gray-600\",\n                        children: error\n                    }, void 0, false, {\n                        fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                        lineNumber: 1738,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>window.location.reload(),\n                        className: \"mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\",\n                        children: \"Reload Page\"\n                    }, void 0, false, {\n                        fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                        lineNumber: 1739,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                lineNumber: 1736,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n            lineNumber: 1735,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"h-screen flex flex-col bg-background\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_bpmn_toolbar__WEBPACK_IMPORTED_MODULE_2__.BpmnToolbar, {\n                onSave: handleSave,\n                onExport: handleExport,\n                onImport: ()=>{\n                    var _fileInputRef_current;\n                    return (_fileInputRef_current = fileInputRef.current) === null || _fileInputRef_current === void 0 ? void 0 : _fileInputRef_current.click();\n                },\n                onUndo: handleUndo,\n                onRedo: handleRedo,\n                onZoomIn: handleZoomIn,\n                onZoomOut: handleZoomOut,\n                onFitToViewport: handleZoomReset,\n                onClear: handleClear,\n                onToggleTheme: handleThemeToggle,\n                onAlignLeft: handleAlignLeft,\n                onAlignCenter: handleAlignCenter,\n                onAlignRight: handleAlignRight,\n                onAlignTop: handleAlignTop,\n                onAlignMiddle: handleAlignMiddle,\n                onAlignBottom: handleAlignBottom,\n                onPreview: handlePreview,\n                onRun: handleRunProcess,\n                onMeetingMode: handleMeetingMode,\n                onToggleMinimap: handleToggleMinimap,\n                onToggleLanguage: handleToggleLanguage,\n                onToggleGrid: handleToggleGrid,\n                theme: theme,\n                zoomLevel: zoomLevel,\n                canUndo: canUndo,\n                canRedo: canRedo,\n                disabled: saving,\n                isMeetingMode: isMeetingMode,\n                isMinimapOpen: isMinimapOpen,\n                showGrid: showGrid\n            }, void 0, false, {\n                fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                lineNumber: 1753,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 flex overflow-hidden\",\n                children: [\n                    !isMeetingMode && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_bpmn_elements_palette__WEBPACK_IMPORTED_MODULE_3__.BpmnElementsPalette, {\n                        onAction: handlePaletteAction,\n                        activeTool: activeTool\n                    }, void 0, false, {\n                        fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                        lineNumber: 1790,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex-1 relative bg-gray-50 dark:bg-gray-900\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                ref: containerRef,\n                                className: \"w-full h-full\",\n                                style: {\n                                    position: \"absolute\",\n                                    top: 0,\n                                    left: 0,\n                                    right: 0,\n                                    bottom: 0\n                                }\n                            }, void 0, false, {\n                                fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                                lineNumber: 1798,\n                                columnNumber: 11\n                            }, this),\n                            !isReady && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"absolute inset-0 flex items-center justify-center bg-gray-50/90 dark:bg-gray-900/90 pointer-events-none\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"text-center\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                                            lineNumber: 1812,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"mt-4 text-gray-600 dark:text-gray-400\",\n                                            children: \"Initializing BPMN Studio...\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                                            lineNumber: 1813,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                                    lineNumber: 1811,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                                lineNumber: 1810,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                        lineNumber: 1797,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                lineNumber: 1787,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                ref: fileInputRef,\n                type: \"file\",\n                accept: \".bpmn,.xml\",\n                onChange: handleImport,\n                className: \"hidden\"\n            }, void 0, false, {\n                fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                lineNumber: 1821,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_XmlViewerModal__WEBPACK_IMPORTED_MODULE_4__.XmlViewerModal, {\n                isOpen: showXmlViewer,\n                onClose: ()=>setShowXmlViewer(false),\n                xml: currentXml,\n                onSave: handleXmlSave,\n                readOnly: false\n            }, void 0, false, {\n                fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n                lineNumber: 1830,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/home/Desktop/mvp/components/bpmn/BpmnStudioFixed.tsx\",\n        lineNumber: 1751,\n        columnNumber: 5\n    }, this);\n}\n_s(BpmnStudioFixed, \"5Zl8qrJMddFoghqgo2Pl6g6tzYk=\", false, function() {\n    return [\n        _components_theme_provider__WEBPACK_IMPORTED_MODULE_5__.useTheme\n    ];\n});\n_c = BpmnStudioFixed;\nvar _c;\n$RefreshReg$(_c, \"BpmnStudioFixed\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/bpmn/BpmnStudioFixed.tsx\n"));

/***/ })

});